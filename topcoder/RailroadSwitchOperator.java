import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

class Touple implements Comparable<Touple> {
	int time;
	int node;
	int direction;

	Touple(int t, int node, int dir) {
		this.direction = dir;
		this.time = t;
		this.node = node;
	}

	@Override
	public int compareTo(Touple o) {
		return this.time - o.time;
	}
}

public class RailroadSwitchOperator {
	public int minEnergy(int N, int[] x, int[] t) {
		List<Touple> list = new ArrayList<Touple>();
		for (int i = 0; i < t.length; i++) {
			int destination = x[i] - 1;
			int a = 0;
			int b = N - 1;
			int time = t[i];
			int currentNode = 0;
			while (a < b) {
				int m = (a + b) / 2;
				if (destination <= m) {
					b = m;
					list.add(new Touple(time, currentNode, -1));
					currentNode = 2 * currentNode + 1;
				} else {
					a = m + 1;
					list.add(new Touple(time, currentNode, 1));
					currentNode = 2 * currentNode + 2;
				}
				time++;
			}
		}
		Collections.sort(list);
		int energy = 0;
		int lastActionTime = Integer.MIN_VALUE;
		int[] dir = new int[N-1];
		int[] lastUsed = new int[N - 1];
		Arrays.fill(dir, -1);
		for (int i = 0; i < list.size(); i++) {
			Touple tp = list.get(i);
			int direction = tp.direction;
			int node = tp.node;
			int time = tp.time;
			if(lastUsed[node] < lastActionTime) {
				dir[node] = direction;
			} else {
				if(dir[node] != direction) {
					energy++;
					lastActionTime = time;
					dir[node] = direction;
				}
			}
			lastUsed[node] = time;
		}

		return energy;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, int[] p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p2[i]);
		}
		System.out.print("}");
		System.out.println("]");
		RailroadSwitchOperator obj;
		int answer;
		obj = new RailroadSwitchOperator();
		long startTime = System.currentTimeMillis();
		answer = obj.minEnergy(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int p0;
		int[] p1;
		int[] p2;
		int p3;

		// ----- test 0 -----
		p0 = 2;
		p1 = new int[] { 1, 2, 1, 2, 1, 2, 1, 2 };
		p2 = new int[] { 1, 2, 3, 4, 5, 6, 7, 8 };
		p3 = 7;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = 4;
		p1 = new int[] { 1, 4, 4, 4, 4, 4, 4, 4, 4, 4 };
		p2 = new int[] { 1, 2, 4, 8, 16, 32, 64, 128, 256, 512 };
		p3 = 1;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = 32;
		p1 = new int[] { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19,
				21, 23, 25, 27, 29, 31 };
		p2 = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
				27, 28, 29, 30, 31, 32 };
		p3 = 20;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = 131072;
		p1 = new int[] { 1, 1, 1, 1, 1, 1, 1 };
		p2 = new int[] { 10, 300, 500, 676, 800, 950, 1000 };
		p3 = 0;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = 1024;
		p1 = new int[] { 1, 1024, 2, 512, 4, 256, 8, 128, 16, 64, 32 };
		p2 = new int[] { 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144 };
		p3 = 10;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
