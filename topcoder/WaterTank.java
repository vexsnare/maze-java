import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class WaterTank
{
	public double minOutputRate(int[] t, int[] x, int C)
	{
		double lo = 0.0;
		double hi = 10e6;
		int maxItr = 0;
		while(lo < hi) {
			double r = (lo + hi)/2;
			double volume = 0.0;
			boolean ok = true;
			for(int i = 0; i < t.length; i++) {
				double add = ((double)(x[i] - r))*t[i];
				volume += add;
				if(volume > C) {
					ok = false;
				}
				if(volume < 0) volume = 0.0;
			}
			if(ok) hi = r;
			else lo = r;
			if(maxItr++ > 200) break;
		}
		return hi;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, int p2, boolean hasAnswer, double p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + p2);
		System.out.println("]");
		WaterTank obj;
		double answer;
		obj = new WaterTank();
		long startTime = System.currentTimeMillis();
		answer = obj.minOutputRate(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == answer && Math.abs(p3 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p3));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		int p2;
		double p3;
		
		// ----- test 0 -----
		p0 = new int[]{3,3};
		p1 = new int[]{1,2};
		p2 = 3;
		p3 = 0.9999999999999999D;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{1,2,3,4,5};
		p1 = new int[]{5,4,3,2,1};
		p2 = 10;
		p3 = 1.9999999999999996D;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{5949,3198,376,3592,4019,3481,5609,3840,6092,4059};
		p1 = new int[]{29,38,96,84,10,2,39,27,76,94};
		p2 = 1000000000;
		p3 = 0.0D;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{9,3,4,8,1,2,5,7,6};
		p1 = new int[]{123,456,789,1011,1213,1415,1617,1819,2021};
		p2 = 11;
		p3 = 2019.1666666666665D;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{100};
		p1 = new int[]{1000};
		p2 = 12345;
		p3 = 876.55D;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
