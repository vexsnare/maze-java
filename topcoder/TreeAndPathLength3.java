import java.util.*;
import java.util.regex.*;

import javax.naming.spi.DirStateFactory.Result;

import java.text.*;
import java.math.*;


public class TreeAndPathLength3
{
	
	public int[] construct(int s)
	{
		List<Integer> abc = getABC(s);
		int a = abc.get(0);
		int b = abc.get(1);
		int c = abc.get(2);
		
		int n = a + b + c + 2;
		ArrayList<Integer> result = new ArrayList<>();
		for(int i = 0; i < a; i++) {
			result.add(i);
			result.add(a);
		}
		result.add(a);
		result.add(a+1);
		for(int i = a+2; i < a+b+2; i++) {
			result.add(a+1);
			result.add(i);
		}
		for(int i = a+b+2; i < n; i++) {
			result.add(i-1);
			result.add(i);
		}
		int[] ret = new int[result.size()];
		for(int i = 0; i < result.size(); i++) {
			ret[i] = result.get(i).intValue();
		}
		return ret;
	}
	List<Integer> getABC(int s) {
		List<Integer> abc = new ArrayList<>();
		for(int a = 1; a <= 500; a++) {
			for(int b = 1; b <= 500; b++) {
				for(int c = 0; a + b + c + 2 <= 500; c++) {
					if(a*b + c + (c > 0 ? (b-1) : 0) == s) {
						abc.addAll(Arrays.asList(a,b,c));
						return abc;
					}
				}
			}
		}
		// dummy
		return abc;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, boolean hasAnswer, int[] p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		TreeAndPathLength3 obj;
		int[] answer;
		obj = new TreeAndPathLength3();
		long startTime = System.currentTimeMillis();
		answer = obj.construct(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p1.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p1[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p1.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p1[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int[] p1;
		
		// ----- test 0 -----
		p0 = 1;
		p1 = new int[]{0,1,1,2,2,3};
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 2;
		p1 = new int[]{0,1,1,2,2,3,3,4};
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 6;
		p1 = new int[]{0,1,1,2,0,3,3,4,0,5,5,6};
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 8;
		p1 = new int[]{0,1,1,2,1,3,3,4,3,5,5,6,5,7};
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
