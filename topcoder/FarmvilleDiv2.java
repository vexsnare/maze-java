import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

class Pair implements Comparable<Pair>{
	int x;
	int y;
	public Pair(int x, int y) {
		this.x = x;
		this.y = y;
	}
	@Override
	public int compareTo(Pair o) {
		return this.y - o.y;
	}
}

public class FarmvilleDiv2
{
	public int minTime(int[] time, int[] cost, int budget)
	{
		ArrayList<Pair> list = new ArrayList<>();
		for(int i = 0; i < time.length; i++) {
			list.add(new Pair(time[i],cost[i]));
		}
		int ans = 0;
		Collections.sort(list);
		for(int i = 0; i < list.size(); i++) {
			int cTime  = list.get(i).x;
			int cCost = list.get(i).y;
			int needed = cTime*cCost;
			if(budget >= needed) {
				budget -= needed;
			} else {
				int canTake = budget/cCost;
				ans += cTime - canTake;
				budget -= cCost *canTake;
			}
		}
		return ans;
		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, int p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + p2);
		System.out.println("]");
		FarmvilleDiv2 obj;
		int answer;
		obj = new FarmvilleDiv2();
		long startTime = System.currentTimeMillis();
		answer = obj.minTime(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		int p2;
		int p3;
		
		// ----- test 0 -----
		p0 = new int[]{100};
		p1 = new int[]{1};
		p2 = 26;
		p3 = 74;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{100};
		p1 = new int[]{1};
		p2 = 101;
		p3 = 0;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{2,1};
		p1 = new int[]{1,1};
		p2 = 3;
		p3 = 0;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{1,2,3,4,5};
		p1 = new int[]{5,4,3,2,1};
		p2 = 15;
		p3 = 6;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{100,100,100,100,100,100,100,100,100,100};
		p1 = new int[]{2,4,6,8,10,1,3,5,7,9};
		p2 = 5000;
		p3 = 50;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		//{{41, 10, 86, 22}, {100, 50, 71, 80}, 3259}
		// ----- test 5 -----
		p0 = new int[]{41, 10, 86, 22};
		p1 = new int[]{100, 50, 71, 80};
		p2 = 3259;
		p3 = 111;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
