import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TreeAndPathLength2
{
	int N, S;
	int[][][] memo = new int[55][55][1010];
	public String possible(int n, int s)
	{
		N = n;
		S = s;
		for(int i = 0; i < 55; i++) {
			for(int j = 0;j < 55; j++) {
				Arrays.fill(memo[i][j], -1);
			}
		}
		return simulate(2, 2, 0) ? "Possible": "Impossible";
	}
	
	boolean simulate(int nodes, int leaf, int sp) {
		if(memo[nodes][leaf][sp] != -1) return memo[nodes][leaf][sp] ==1 ? true: false;
		if(nodes == N && sp == S) {
			return true;
		} else {
			boolean result = false;
			for(int i = 1; i <= N-nodes; i++) {
				int simplePaths = sp+i+((i*(i-1))/2);
				if(simplePaths <= S)
				result |= simulate(nodes+i, leaf-1+i, simplePaths);
			}
			memo[nodes][leaf][sp] = result ? 1 : 0;
			return result;
		}
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, String p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		TreeAndPathLength2 obj;
		String answer;
		obj = new TreeAndPathLength2();
		long startTime = System.currentTimeMillis();
		answer = obj.possible(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p2 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p2);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		String p2;
		
		// ----- test 0 -----
		p0 = 4;
		p1 = 3;
		p2 = "Possible";
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 4;
		p1 = 2;
		p2 = "Possible";
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 3;
		p1 = 2;
		p2 = "Impossible";
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 5;
		p1 = 4;
		p2 = "Possible";
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 50;
		p1 = 999;
		p2 = "Impossible";
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = 50;
		p1 = 1000;
		p2 = "Possible";
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
